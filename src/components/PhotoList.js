import { useState, useEffect, useMemo } from 'react';
import { Row, Col, Form, Button, Alert } from 'react-bootstrap';
import { Link } from 'react-router-dom';
import PhotoCard from './PhotoCard';

const PhotoList = () => {
  const [photos, setPhotos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState({
    category_type: '',
    sort: '-uploaded_at'
  });
  
  const photosPerPage = 12;
  const categories = ['nature', 'portrait', 'landscape', 'street', 'macro', 'other'];
  
  // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const mockPhotos = [
    {
      id: 1,
      slug: 'photo-1',
      title: '–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç',
      description: '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º',
      image: { url: 'https://lh3.googleusercontent.com/proxy/l2jRtfhKlX6FMj_HnNx_ku2bFg8BndYOuR4mFRl8htNacOQSmjSoalS-YfdPxbgQTFb6jY7q7ptq3BsWts0IcB-Kif6tdtxnaxREWw' },
      category_type: 'nature',
      category_type_display: '–ü—Ä–∏—Ä–æ–¥–∞',
      uploaded_at: '2024-01-15T10:30:00Z',
      uploaded_by: { username: 'photographer1' },
      tags: [
        { name: '–∑–∞–∫–∞—Ç', slug: 'sunset' },
        { name: '–º–æ—Ä–µ', slug: 'sea' }
      ]
    },
    {
      id: 2,
      slug: 'photo-2',
      title: '–ü–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏',
      description: '–ö—Ä–∞—Å–∏–≤—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –≤ —Å—Ç—É–¥–∏–∏',
      image: { url: 'https://inside-studios.ru/wp-content/uploads/2023/09/Inside-9-5-682x1024-optimized.jpg' },
      category_type: 'portrait',
      category_type_display: '–ü–æ—Ä—Ç—Ä–µ—Ç',
      uploaded_at: '2024-01-14T15:20:00Z',
      uploaded_by: { username: 'photographer2' },
      tags: [
        { name: '–ø–æ—Ä—Ç—Ä–µ—Ç', slug: 'portrait' },
        { name: '—Å—Ç—É–¥–∏—è', slug: 'studio' }
      ]
    }
  ];

  useEffect(() => {
    fetchPhotos();
  }, [filters]);

  const fetchPhotos = async () => {
    setLoading(true);
    try {
      setTimeout(() => {
        setPhotos(mockPhotos);
        setLoading(false);
      }, 500);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
      setLoading(false);
    }
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({
      ...prev,
      [name]: value
    }));
    setCurrentPage(1);
  };

  const handleApplyFilters = (e) => {
    e.preventDefault();
    fetchPhotos();
  };

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const filteredAndSortedPhotos = useMemo(() => {
    let filtered = [...photos];
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (filters.category_type) {
      filtered = filtered.filter(photo => photo.category_type === filters.category_type);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      switch (filters.sort) {
        case '-uploaded_at':
          return new Date(b.uploaded_at) - new Date(a.uploaded_at);
        case 'uploaded_at':
          return new Date(a.uploaded_at) - new Date(b.uploaded_at);
        case 'title':
          return a.title.localeCompare(b.title);
        case '-title':
          return b.title.localeCompare(a.title);
        default:
          return 0;
      }
    });
    
    return filtered;
  }, [photos, filters]);

  const currentPhotos = filteredAndSortedPhotos.slice(
    (currentPage - 1) * photosPerPage,
    currentPage * photosPerPage
  );

  const stats = {
    total_photos: photos.length,
    latest_photo: photos.length > 0 ? photos[0] : null
  };

  if (loading) {
    return (
      <div className="text-center">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return <Alert variant="danger">{error}</Alert>;
  }

  return (
    <div>
      <Row>
        <Col md={12}>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1>–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h1>
            <Link to="/upload" className="btn btn-success">
              <i className="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            </Link>
          </div>

          {/* –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
          <div className="filters mb-4">
            <Form onSubmit={handleApplyFilters}>
              <Row className="g-3">
                <Col md={3}>
                  <Form.Select
                    name="category_type"
                    value={filters.category_type}
                    onChange={handleFilterChange}
                  >
                    <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                    {categories.map(category => (
                      <option key={category} value={category}>
                        {category === 'nature' ? '–ü—Ä–∏—Ä–æ–¥–∞' :
                         category === 'portrait' ? '–ü–æ—Ä—Ç—Ä–µ—Ç' :
                         category === 'landscape' ? '–ü–µ–π–∑–∞–∂' :
                         category === 'street' ? '–£–ª–∏—á–Ω–∞—è' :
                         category === 'macro' ? '–ú–∞–∫—Ä–æ' : '–î—Ä—É–≥–æ–µ'}
                      </option>
                    ))}
                  </Form.Select>
                </Col>
                <Col md={3}>
                  <Form.Select
                    name="sort"
                    value={filters.sort}
                    onChange={handleFilterChange}
                  >
                    <option value="-uploaded_at">–ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏</option>
                    <option value="uploaded_at">–°—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏</option>
                    <option value="title">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ê-–Ø</option>
                    <option value="-title">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ø-–ê</option>
                  </Form.Select>
                </Col>
                <Col md={2}>
                  <Button type="submit" variant="primary">
                    –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                  </Button>
                </Col>
              </Row>
            </Form>
          </div>

          {/* –°–µ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
          <div className="photos-table-container">
            {currentPhotos.length > 0 ? (
              <div className="photo-grid">
                {currentPhotos.map(photo => (
                  <PhotoCard key={photo.id} photo={photo} />
                ))}
              </div>
            ) : (
              <div className="empty-state text-center py-5">
                <div className="empty-state-icon" style={{ fontSize: '4rem' }}>üì∑</div>
                <h3>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏{' '}
                  <Link to="/upload">–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</Link>.
                </p>
              </div>
            )}
          </div>
        </Col>
      </Row>
    </div>
  );
};

export default PhotoList;
